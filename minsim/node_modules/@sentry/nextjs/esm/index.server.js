import { _optionalChain } from '@sentry/utils/esm/buildPolyfills';
import { getHubFromCarrier, getMainCarrier } from '@sentry/hub';
import { RewriteFrames } from '@sentry/integrations';
import { init as init$1, configureScope, getCurrentHub, Integrations } from '@sentry/node';
export * from '@sentry/node';
import { hasTracingEnabled } from '@sentry/tracing';
import { logger, escapeStringForRegex } from '@sentry/utils';
import * as domain$1 from 'domain';
import * as path from 'path';
import { isBuild } from './utils/isBuild.js';
export { isBuild } from './utils/isBuild.js';
import { buildMetadata } from './utils/metadata.js';
import { addIntegration } from './utils/userIntegrations.js';
export { captureUnderscoreErrorException } from './utils/_error.js';
export { ErrorBoundary, showReportDialog, withErrorBoundary } from '@sentry/react';
export { withSentryConfig } from './config/index.js';
import './config/wrappers/index.js';
export { withSentry } from './utils/withSentry.js';
export { withSentryGetServerSideProps } from './config/wrappers/withSentryGetServerSideProps.js';
export { withSentryGetStaticProps } from './config/wrappers/withSentryGetStaticProps.js';
export { withSentryServerSideGetInitialProps } from './config/wrappers/withSentryServerSideGetInitialProps.js';
export { withSentryServerSideAppGetInitialProps } from './config/wrappers/withSentryServerSideAppGetInitialProps.js';
export { withSentryServerSideDocumentGetInitialProps } from './config/wrappers/withSentryServerSideDocumentGetInitialProps.js';
export { withSentryServerSideErrorGetInitialProps } from './config/wrappers/withSentryServerSideErrorGetInitialProps.js';

var domain = domain$1 ;

var isVercel = !!process.env.VERCEL;

/** Inits the Sentry NextJS SDK on node. */
function init(options) {
  if ((typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && options.debug) {
    logger.enable();
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('Initializing SDK...');

  if (sdkAlreadyInitialized()) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('SDK already initialized');
    return;
  }

  buildMetadata(options, ['nextjs', 'node']);
  options.environment = options.environment || process.env.NODE_ENV;
  addServerIntegrations(options);
  // Right now we only capture frontend sessions for Next.js
  options.autoSessionTracking = false;

  // In an ideal world, this init function would be called before any requests are handled. That way, every domain we
  // use to wrap a request would inherit its scope and client from the global hub. In practice, however, handling the
  // first request is what causes us to initialize the SDK, as the init code is injected into `_app` and all API route
  // handlers, and those are only accessed in the course of handling a request. As a result, we're already in a domain
  // when `init` is called. In order to compensate for this and mimic the ideal world scenario, we stash the active
  // domain, run `init` as normal, and then restore the domain afterwards, copying over data from the main hub as if we
  // really were inheriting.
  var activeDomain = domain.active;
  domain.active = null;

  init$1(options);

  var filterTransactions = event => {
    return event.type === 'transaction' && event.transaction === '/404' ? null : event;
  };

  filterTransactions.id = 'NextServer404TransactionFilter';

  configureScope(scope => {
    scope.setTag('runtime', 'node');
    if (isVercel) {
      scope.setTag('vercel', true);
    }

    scope.addEventProcessor(filterTransactions);
  });

  if (activeDomain) {
    var globalHub = getHubFromCarrier(getMainCarrier());
    var domainHub = getHubFromCarrier(activeDomain);

    // apply the changes made by `nodeInit` to the domain's hub also
    domainHub.bindClient(globalHub.getClient());
    _optionalChain([domainHub, 'access', _ => _.getScope, 'call', _2 => _2(), 'optionalAccess', _3 => _3.update, 'call', _4 => _4(globalHub.getScope())]);
    // `scope.update()` doesnâ€™t copy over event processors, so we have to add it manually
    _optionalChain([domainHub, 'access', _5 => _5.getScope, 'call', _6 => _6(), 'optionalAccess', _7 => _7.addEventProcessor, 'call', _8 => _8(filterTransactions)]);

    // restore the domain hub as the current one
    domain.active = activeDomain;
  }

  (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.log('SDK successfully initialized');
}

function sdkAlreadyInitialized() {
  var hub = getCurrentHub();
  return !!hub.getClient();
}

function addServerIntegrations(options) {
  // This value is injected at build time, based on the output directory specified in the build config. Though a default
  // is set there, we set it here as well, just in case something has gone wrong with the injection.
  var distDirName = (global ).__rewriteFramesDistDir__ || '.next';
  // nextjs always puts the build directory at the project root level, which is also where you run `next start` from, so
  // we can read in the project directory from the currently running process
  var distDirAbsPath = path.resolve(process.cwd(), distDirName);
  var SOURCEMAP_FILENAME_REGEX = new RegExp(escapeStringForRegex(distDirAbsPath));

  var defaultRewriteFramesIntegration = new RewriteFrames({
    iteratee: frame => {
      frame.filename = _optionalChain([frame, 'access', _9 => _9.filename, 'optionalAccess', _10 => _10.replace, 'call', _11 => _11(SOURCEMAP_FILENAME_REGEX, 'app:///_next')]);
      return frame;
    },
  });

  if (options.integrations) {
    options.integrations = addIntegration(defaultRewriteFramesIntegration, options.integrations);
  } else {
    options.integrations = [defaultRewriteFramesIntegration];
  }

  if (hasTracingEnabled(options)) {
    var defaultHttpTracingIntegration = new Integrations.Http({ tracing: true });
    options.integrations = addIntegration(defaultHttpTracingIntegration, options.integrations, {
      Http: { keyPath: '_tracing', value: true },
    });
  }
}

// Wrap various server methods to enable error monitoring and tracing. (Note: This only happens for non-Vercel
// deployments, because the current method of doing the wrapping a) crashes Next 12 apps deployed to Vercel and
// b) doesn't work on those apps anyway. We also don't do it during build, because there's no server running in that
// phase.)
if (!isVercel && !isBuild()) {
  // Dynamically require the file because even importing from it causes Next 12 to crash on Vercel.
  // In environments where the JS file doesn't exist, such as testing, import the TS file.
  try {
        const { instrumentServer } = require('./utils/instrumentServer.js');
    instrumentServer();
  } catch (err) {
    (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__) && logger.warn(`Error: Unable to instrument server for tracing. Got ${err}.`);
  }
}

export { init };
//# sourceMappingURL=index.server.js.map
