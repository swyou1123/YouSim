{"version":3,"file":"rollup.js","sources":["../../../../src/config/loaders/rollup.ts"],"sourcesContent":["import type { RollupSucraseOptions } from '@rollup/plugin-sucrase';\nimport sucrase from '@rollup/plugin-sucrase';\nimport { logger } from '@sentry/utils';\nimport * as path from 'path';\nimport type { InputOptions as RollupInputOptions, OutputOptions as RollupOutputOptions } from 'rollup';\nimport { rollup } from 'rollup';\n\nconst getRollupInputOptions: (proxyPath: string, resourcePath: string) => RollupInputOptions = (\n  proxyPath,\n  resourcePath,\n) => ({\n  input: proxyPath,\n  plugins: [\n    // For some reason, even though everything in `RollupSucraseOptions` besides `transforms` is supposed to be\n    // optional, TS complains that there are a bunch of missing properties (hence the typecast). Similar to\n    // https://github.com/microsoft/TypeScript/issues/20722, though that's been fixed. (In this case it's an interface\n    // exporting a `Pick` picking optional properties which is turning them required somehow.)'\n    sucrase({\n      transforms: ['jsx', 'typescript'],\n    } as unknown as RollupSucraseOptions),\n  ],\n\n  // We want to process as few files as possible, so as not to slow down the build any more than we have to. We need the\n  // proxy module (living in the temporary file we've created) and the file we're wrapping not to be external, because\n  // otherwise they won't be processed. (We need Rollup to process the former so that we can use the code, and we need\n  // it to process the latter so it knows what exports to re-export from the proxy module.) Past that, we don't care, so\n  // don't bother to process anything else.\n  external: importPath => importPath !== proxyPath && importPath !== resourcePath,\n\n  // Prevent rollup from stressing out about TS's use of global `this` when polyfilling await. (TS will polyfill if the\n  // user's tsconfig `target` is set to anything before `es2017`. See https://stackoverflow.com/a/72822340 and\n  // https://stackoverflow.com/a/60347490.)\n  context: 'this',\n\n  // Rollup's path-resolution logic when handling re-exports can go wrong when wrapping pages which aren't at the root\n  // level of the `pages` directory. This may be a bug, as it doesn't match the behavior described in the docs, but what\n  // seems to happen is this:\n  //\n  //   - We try to wrap `pages/xyz/userPage.js`, which contains `export { helperFunc } from '../../utils/helper'`\n  //   - Rollup converts '../../utils/helper' into an absolute path\n  //   - We mark the helper module as external\n  //   - Rollup then converts it back to a relative path, but relative to `pages/` rather than `pages/xyz/`. (This is\n  //     the part which doesn't match the docs. They say that Rollup will use the common ancestor of all modules in the\n  //     bundle as the basis for the relative path calculation, but both our temporary file and the page being wrapped\n  //     live in `pages/xyz/`, and they're the only two files in the bundle, so `pages/xyz/`` should be used as the\n  //     root. Unclear why it's not.)\n  //   - As a result of the miscalculation, our proxy module will include `export { helperFunc } from '../utils/helper'`\n  //     rather than the expected `export { helperFunc } from '../../utils/helper'`, thereby causing a build error in\n  //     nextjs..\n  //\n  // It's not 100% clear why, but telling it not to do the conversion back from absolute to relative (by setting\n  // `makeAbsoluteExternalsRelative` to `false`) seems to also prevent it from going from relative to absolute in the\n  // first place, with the result that the path remains untouched (which is what we want.)\n  makeAbsoluteExternalsRelative: false,\n});\n\nconst rollupOutputOptions: RollupOutputOptions = {\n  format: 'esm',\n\n  // Don't create a bundle - we just want the transformed entrypoint file\n  preserveModules: true,\n};\n\n/**\n * Use Rollup to process the proxy module file (located at `tempProxyFilePath`) in order to split its `export * from\n * '<wrapped file>'` call into individual exports (which nextjs seems to need).\n *\n * @param tempProxyFilePath The path to the temporary file containing the proxy module code\n * @param resourcePath The path to the file being wrapped\n * @returns The processed proxy module code, or undefined if an error occurs\n */\nexport async function rollupize(tempProxyFilePath: string, resourcePath: string): Promise<string | undefined> {\n  let finalBundle;\n\n  try {\n    const intermediateBundle = await rollup(getRollupInputOptions(tempProxyFilePath, resourcePath));\n    finalBundle = await intermediateBundle.generate(rollupOutputOptions);\n  } catch (err) {\n    __DEBUG_BUILD__ &&\n      logger.warn(\n        `Could not wrap ${resourcePath}. An error occurred while processing the proxy module template:\\n${err}`,\n      );\n    return undefined;\n  }\n\n  // The module at index 0 is always the entrypoint, which in this case is the proxy module.\n  let { code } = finalBundle.output[0];\n\n  // Rollup does a few things to the code we *don't* want. Undo those changes before returning the code.\n  //\n  // Nextjs uses square brackets surrounding a path segment to denote a parameter in the route, but Rollup turns those\n  // square brackets into underscores. Further, Rollup adds file extensions to bare-path-type import and export sources.\n  // Because it assumes that everything will have already been processed, it always uses `.js` as the added extension.\n  // We need to restore the original name and extension so that Webpack will be able to find the wrapped file.\n  const resourceFilename = path.basename(resourcePath);\n  const mutatedResourceFilename = resourceFilename\n    // `[\\\\[\\\\]]` is the character class containing `[` and `]`\n    .replace(new RegExp('[\\\\[\\\\]]', 'g'), '_')\n    .replace(/(jsx?|tsx?)$/, 'js');\n  code = code.replace(new RegExp(mutatedResourceFilename, 'g'), resourceFilename);\n\n  return code;\n}\n"],"names":[],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}