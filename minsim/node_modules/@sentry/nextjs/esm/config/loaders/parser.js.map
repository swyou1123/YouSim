{"version":3,"file":"parser.js","sources":["../../../../src/config/loaders/parser.ts"],"sourcesContent":["/**\n * Note: The implementation here is loosely based on the jsx and tsx parsers in 'jscodeshift'. It doesn't expose its\n * parsers, so we have to provide our own if we want to use anything besides the default. Fortunately, its parsers turn\n * out to just be wrappers around `babel.parse` with certain options set. The options chosen here are different from the\n * `jscodeshift` parsers in that a) unrecognized and deprecated options and options set to default values have been\n * removed, and b) all standard plugins are included, meaning the widest range of user code is able to be parsed.\n */\n\nimport * as babel from '@babel/parser';\nimport { File } from '@babel/types';\n\ntype Parser = {\n  parse: (code: string) => babel.ParseResult<File>;\n};\n\nconst options: babel.ParserOptions = {\n  // Nextjs supports dynamic import, so this seems like a good idea\n  allowImportExportEverywhere: true,\n  // We're only supporting wrapping in ESM pages\n  sourceType: 'module',\n  // Without `tokens`, jsx parsing breaks\n  tokens: true,\n  // The maximal set of non-mutually-exclusive standard plugins, so as to support as much weird syntax in our users'\n  // code as possible\n  plugins: [\n    'asyncDoExpressions',\n    'decimal',\n    ['decorators', { decoratorsBeforeExport: false }],\n    'decoratorAutoAccessors',\n    'destructuringPrivate',\n    'doExpressions',\n    'estree',\n    'exportDefaultFrom',\n    'functionBind',\n    'importMeta',\n    'importAssertions',\n    'jsx',\n    'moduleBlocks',\n    'partialApplication',\n    ['pipelineOperator', { proposal: 'hack', topicToken: '^' }],\n    'regexpUnicodeSets',\n    'throwExpressions',\n    'typescript',\n  ] as babel.ParserPlugin[],\n};\n\nexport const parser: Parser = {\n  parse: code => babel.parse(code, options),\n};\n"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;"}