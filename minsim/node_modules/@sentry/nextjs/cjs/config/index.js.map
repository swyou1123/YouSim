{"version":3,"file":"index.js","sources":["../../../src/config/index.ts"],"sourcesContent":["import type { ExportedNextConfig, NextConfigFunction, NextConfigObject, SentryWebpackPluginOptions } from './types';\nimport { constructWebpackConfigFunction } from './webpack';\n\n/**\n * Add Sentry options to the config to be exported from the user's `next.config.js` file.\n *\n * @param exportedUserNextConfig The existing config to be exported prior to adding Sentry\n * @param userSentryWebpackPluginOptions Configuration for SentryWebpackPlugin\n * @returns The modified config to be exported\n */\nexport function withSentryConfig(\n  exportedUserNextConfig: ExportedNextConfig = {},\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions> = {},\n): NextConfigFunction | NextConfigObject {\n  // If the user has passed us a function, we need to return a function, so that we have access to `phase` and\n  // `defaults` in order to pass them along to the user's function\n  if (typeof exportedUserNextConfig === 'function') {\n    return function (phase: string, defaults: { defaultConfig: NextConfigObject }): NextConfigObject {\n      let userNextConfigObject = exportedUserNextConfig(phase, defaults);\n\n      // Next 12.2.3+ warns about non-canonical properties on `userNextConfig`, so grab and then remove the `sentry`\n      // property there. Where we actually need it is in the webpack config function we're going to create, so pass it\n      // to `constructWebpackConfigFunction` so that it will be in the created function's closure.\n      const { sentry: userSentryOptions } = userNextConfigObject;\n      delete userNextConfigObject.sentry;\n      // Remind TS that there's now no `sentry` property\n      userNextConfigObject = userNextConfigObject as NextConfigObject;\n\n      return {\n        ...userNextConfigObject,\n        webpack: constructWebpackConfigFunction(\n          userNextConfigObject,\n          userSentryWebpackPluginOptions,\n          userSentryOptions,\n        ),\n      };\n    };\n  }\n\n  // Otherwise, we can just merge their config with ours and return an object.\n\n  // Prevent nextjs from getting mad about having a non-standard config property in `userNextConfig`. (See note above\n  // for a more thorough explanation of what we're doing here.)\n  const { sentry: userSentryOptions } = exportedUserNextConfig;\n  delete exportedUserNextConfig.sentry;\n  // Remind TS that there's now no `sentry` property\n  const userNextConfigObject = exportedUserNextConfig as NextConfigObject;\n\n  return {\n    ...userNextConfigObject,\n    webpack: constructWebpackConfigFunction(userNextConfigObject, userSentryWebpackPluginOptions, userSentryOptions),\n  };\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;"}