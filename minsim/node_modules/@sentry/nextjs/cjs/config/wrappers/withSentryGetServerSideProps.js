Object.defineProperty(exports, '__esModule', { value: true });

var tracing = require('@sentry/tracing');
var utils = require('@sentry/utils');
var isBuild = require('../../utils/isBuild.js');
var wrapperUtils = require('./wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getServerSideProps` function
 *
 * @param origGetServerSideProps The user's `getServerSideProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function withSentryGetServerSideProps(
  origGetServerSideProps,
  parameterizedRoute,
) {
  return async function (
    ...getServerSidePropsArguments
  ) {
    if (isBuild.isBuild()) {
      return origGetServerSideProps(...getServerSidePropsArguments);
    }

    const [context] = getServerSidePropsArguments;
    const { req, res } = context;

    var errorWrappedGetServerSideProps = wrapperUtils.withErrorInstrumentation(origGetServerSideProps);

    if (tracing.hasTracingEnabled()) {
      var serverSideProps = await wrapperUtils.callTracedServerSideDataFetcher(
        errorWrappedGetServerSideProps,
        getServerSidePropsArguments,
        req,
        res,
        {
          dataFetcherRouteName: parameterizedRoute,
          requestedRouteName: parameterizedRoute,
          dataFetchingMethodName: 'getServerSideProps',
        },
      );

      if ('props' in serverSideProps) {
        var requestTransaction = wrapperUtils.getTransactionFromRequest(req);
        if (requestTransaction) {
          serverSideProps.props._sentryTraceData = requestTransaction.toTraceparent();
          serverSideProps.props._sentryBaggage = utils.serializeBaggage(requestTransaction.getBaggage());
        }
      }

      return serverSideProps;
    } else {
      return errorWrappedGetServerSideProps(...getServerSidePropsArguments);
    }
  };
}

exports.withSentryGetServerSideProps = withSentryGetServerSideProps;
//# sourceMappingURL=withSentryGetServerSideProps.js.map
