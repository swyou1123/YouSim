Object.defineProperty(exports, '__esModule', { value: true });

var tracing = require('@sentry/tracing');
var utils = require('@sentry/utils');
var isBuild = require('../../utils/isBuild.js');
var wrapperUtils = require('./wrapperUtils.js');

/**
 * Create a wrapped version of the user's exported `getInitialProps` function
 *
 * @param origGetInitialProps The user's `getInitialProps` function
 * @param parameterizedRoute The page's parameterized route
 * @returns A wrapped version of the function
 */
function withSentryServerSideGetInitialProps(origGetInitialProps) {
  return async function (
    ...getInitialPropsArguments
  ) {
    if (isBuild.isBuild()) {
      return origGetInitialProps(...getInitialPropsArguments);
    }

    const [context] = getInitialPropsArguments;
    const { req, res } = context;

    var errorWrappedGetInitialProps = wrapperUtils.withErrorInstrumentation(origGetInitialProps);

    if (tracing.hasTracingEnabled()) {
      // Since this wrapper is only applied to `getInitialProps` running on the server, we can assert that `req` and
      // `res` are always defined: https://nextjs.org/docs/api-reference/data-fetching/get-initial-props#context-object
      var initialProps

 = await wrapperUtils.callTracedServerSideDataFetcher(errorWrappedGetInitialProps, getInitialPropsArguments, req, res, {
        dataFetcherRouteName: context.pathname,
        requestedRouteName: context.pathname,
        dataFetchingMethodName: 'getInitialProps',
      });

      var requestTransaction = wrapperUtils.getTransactionFromRequest(req);
      if (requestTransaction) {
        initialProps._sentryTraceData = requestTransaction.toTraceparent();
        initialProps._sentryBaggage = utils.serializeBaggage(requestTransaction.getBaggage());
      }

      return initialProps;
    } else {
      return errorWrappedGetInitialProps(...getInitialPropsArguments);
    }
  };
}

exports.withSentryServerSideGetInitialProps = withSentryServerSideGetInitialProps;
//# sourceMappingURL=withSentryServerSideGetInitialProps.js.map
