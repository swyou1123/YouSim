{"version":3,"file":"userIntegrations.js","sources":["../../../src/utils/userIntegrations.ts"],"sourcesContent":["import { Integration } from '@sentry/types';\n\nexport type UserFunctionIntegrations = (integrations: Integration[]) => Integration[];\nexport type UserIntegrations = Integration[] | UserFunctionIntegrations;\n\ntype Options = {\n  [integrationName: string]:\n    | {\n        keyPath: string;\n        value: unknown;\n      }\n    | undefined;\n};\n\n/**\n * Recursively traverses an object to update an existing nested key.\n * Note: The provided key path must include existing properties,\n * the function will not create objects while traversing.\n *\n * @param obj An object to update\n * @param value The value to update the nested key with\n * @param keyPath The path to the key to update ex. fizz.buzz.foo\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setNestedKey(obj: Record<string, any>, keyPath: string, value: unknown): void {\n  // Ex. foo.bar.zoop will extract foo and bar.zoop\n  const match = keyPath.match(/([a-z]+)\\.(.*)/i);\n  if (match === null) {\n    obj[keyPath] = value;\n  } else {\n    setNestedKey(obj[match[1]], match[2], value);\n  }\n}\n\n/**\n * Retrieves the patched integrations with the provided integration.\n *\n * The integration must be present in the final user integrations, and they are compared\n * by integration name. If the user has defined one, there's nothing to patch; if not,\n * the provided integration is added.\n *\n * @param integration The integration to patch, if necessary.\n * @param userIntegrations Integrations defined by the user.\n * @param options options to update for a particular integration\n * @returns Final integrations, patched if necessary.\n */\nexport function addIntegration(\n  integration: Integration,\n  userIntegrations: UserIntegrations,\n  options: Options = {},\n): UserIntegrations {\n  if (Array.isArray(userIntegrations)) {\n    return addIntegrationToArray(integration, userIntegrations, options);\n  } else {\n    return addIntegrationToFunction(integration, userIntegrations, options);\n  }\n}\n\nfunction addIntegrationToArray(\n  integration: Integration,\n  userIntegrations: Integration[],\n  options: Options,\n): Integration[] {\n  let includesName = false;\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let x = 0; x < userIntegrations.length; x++) {\n    if (userIntegrations[x].name === integration.name) {\n      includesName = true;\n    }\n\n    const op = options[userIntegrations[x].name];\n    if (op) {\n      setNestedKey(userIntegrations[x], op.keyPath, op.value);\n    }\n  }\n\n  if (includesName) {\n    return userIntegrations;\n  }\n  return [...userIntegrations, integration];\n}\n\nfunction addIntegrationToFunction(\n  integration: Integration,\n  userIntegrationsFunc: UserFunctionIntegrations,\n  options: Options,\n): UserFunctionIntegrations {\n  const wrapper: UserFunctionIntegrations = defaultIntegrations => {\n    const userFinalIntegrations = userIntegrationsFunc(defaultIntegrations);\n    return addIntegrationToArray(integration, userFinalIntegrations, options);\n  };\n  return wrapper;\n}\n"],"names":[],"mappings":";;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;"}