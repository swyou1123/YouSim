/**
 * Note: The implementation here is loosely based on the jsx and tsx parsers in 'jscodeshift'. It doesn't expose its
 * parsers, so we have to provide our own if we want to use anything besides the default. Fortunately, its parsers turn
 * out to just be wrappers around `babel.parse` with certain options set. The options chosen here are different from the
 * `jscodeshift` parsers in that a) unrecognized and deprecated options and options set to default values have been
 * removed, and b) all standard plugins are included, meaning the widest range of user code is able to be parsed.
 */
import * as babel from '@babel/parser';
import { File } from '@babel/types';
declare type Parser = {
    parse: (code: string) => babel.ParseResult<File>;
};
export declare const parser: Parser;
export {};
//# sourceMappingURL=parser.d.ts.map