import * as jscsTypes from 'jscodeshift';
declare type ASTNode = jscsTypes.ASTNode;
export declare type AST<T = ASTNode> = jscsTypes.Collection<T>;
declare type ExportSpecifierNode = jscsTypes.ExportSpecifier;
declare type VariableDeclarationNode = jscsTypes.VariableDeclaration;
/**
 * Create an AST based on the given code.
 *
 * @param code The code to convert to an AST.
 * @throws Throws parsing error if the code is unparsable
 * @returns The AST
 */
export declare function makeAST(code: string): AST;
/**
 * Find all nodes which are declarations of variables with the given name
 *
 * @param ast The code, in AST form
 * @param name The variable name to search for
 * @returns A collection of NodePaths pointing to any nodes which were found
 */
export declare function findDeclarations(ast: AST, name: string): AST<VariableDeclarationNode>;
/**
 * Find all nodes which are exports of variables with the given name
 *
 * @param ast The code, in AST form
 * @param name The variable name to search for
 * @returns A collection of NodePaths pointing to any nodes which were found
 */
export declare function findExports(ast: AST, name: string): AST<ExportSpecifierNode>;
/**
 * Rename all identifiers with the given name, except in cases where it would break outside references.
 *
 * @param ast The AST representing the code
 * @param origName The name being replaced
 * @param newName The new name to use, if already chosen (one will be generated if not given)
 * @returns The new name assigned to the identifiers, or undefined if no identifiers were renamed
 */
export declare function renameIdentifiers(ast: AST, origName: string, newName?: string): string | undefined;
/**
 * Remove comments from all nodes in the given AST.
 *
 * Note: Comments are not nodes in and of themselves, but are instead attached to the nodes above and below them.
 *
 * @param ast The code, in AST form
 */
export declare function removeComments(ast: AST): void;
/**
 * Determines from a given AST of a file whether the file has a default export or not.
 */
export declare function hasDefaultExport(ast: AST): boolean;
/**
 * Given the AST of a file, this function extracts all named exports from the file.
 *
 * @returns a list of deduplicated identifiers.
 */
export declare function getExportIdentifierNames(ast: AST): string[];
export {};
//# sourceMappingURL=ast.d.ts.map