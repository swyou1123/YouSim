import { SentryCliPluginOptions } from '@sentry/webpack-plugin';
import { WebpackPluginInstance } from 'webpack';
export declare type SentryWebpackPluginOptions = SentryCliPluginOptions;
export declare type SentryWebpackPlugin = WebpackPluginInstance & {
    options: SentryWebpackPluginOptions;
};
/**
 * Overall Nextjs config
 */
export declare type ExportedNextConfig = NextConfigObjectWithSentry | NextConfigFunctionWithSentry;
export declare type NextConfigObjectWithSentry = NextConfigObject & {
    sentry?: UserSentryOptions;
};
export declare type NextConfigFunctionWithSentry = (phase: string, defaults: {
    defaultConfig: NextConfigObject;
}) => NextConfigObjectWithSentry;
export declare type NextConfigObject = {
    webpack?: WebpackConfigFunction;
    target?: 'server' | 'experimental-serverless-trace';
    distDir?: string;
    basePath?: string;
    publicRuntimeConfig?: {
        [key: string]: unknown;
    };
};
export declare type UserSentryOptions = {
    disableServerWebpackPlugin?: boolean;
    disableClientWebpackPlugin?: boolean;
    hideSourceMaps?: boolean;
    transpileClientSDK?: boolean;
    widenClientFileUpload?: boolean;
    experiments?: {
        autoWrapDataFetchers?: boolean;
    };
};
export declare type NextConfigFunction = (phase: string, defaults: {
    defaultConfig: NextConfigObject;
}) => NextConfigObject;
/**
 * Webpack config
 */
export declare type WebpackConfigFunction = (config: WebpackConfigObject, options: BuildContext) => WebpackConfigObject;
export declare type WebpackConfigObject = {
    devtool?: string;
    plugins?: Array<WebpackPluginInstance | SentryWebpackPlugin>;
    entry: WebpackEntryProperty;
    output: {
        filename: string;
        path: string;
    };
    target: string;
    context: string;
    resolve?: {
        alias?: {
            [key: string]: string | boolean;
        };
    };
    module?: {
        rules: Array<WebpackModuleRule>;
    };
} & {
    [key: string]: unknown;
};
export declare type BuildContext = {
    dev: boolean;
    isServer: boolean;
    buildId: string;
    dir: string;
    config: NextConfigObject;
    webpack: {
        version: string;
    };
};
/**
 * Webpack `entry` config
 */
export declare type WebpackEntryProperty = EntryPropertyObject | EntryPropertyFunction;
export declare type EntryPropertyObject = {
    [key: string]: EntryPointValue;
};
export declare type EntryPropertyFunction = () => Promise<EntryPropertyObject>;
export declare type EntryPointValue = string | Array<string> | EntryPointObject;
export declare type EntryPointObject = {
    import: string | Array<string>;
};
/**
 * Webpack `module.rules` entry
 */
export declare type WebpackModuleRule = {
    test?: string | RegExp;
    include?: Array<string | RegExp> | RegExp;
    exclude?: (filepath: string) => boolean;
    use?: ModuleRuleUseProperty | Array<ModuleRuleUseProperty>;
    oneOf?: Array<WebpackModuleRule>;
};
export declare type ModuleRuleUseProperty = {
    loader?: string;
    options?: Record<string, unknown>;
};
//# sourceMappingURL=types.d.ts.map